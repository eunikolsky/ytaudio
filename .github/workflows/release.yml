# based on https://kodimensional.dev/github-actions
# and https://vrom911.github.io/blog/github-actions-releases

name: ytaudio Release

on:
  # Trigger the workflow on the new 'v*' tag created
  push:
    tags:
      - "v*"

permissions:
  # allows to create releases from a workflow; this is required when repo's
  # actions workflow permissions is set to "Read repository contents permission"
  contents: write

jobs:
  create_release:
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v3
        with:
          name: release_url
          path: release_url.txt

  build_artifact:
    needs: [create_release]
    name: ${{ github.ref }}
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set tag name
        uses: olegtarasov/get-tag@v2
        id: tag
        env:
          # FIXME https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          tagRegex: "v(.*)"
          tagRegexGroup: 1

      - uses: haskell/actions/setup@v1
        with:
          enable-stack: true

      - uses: actions/cache@v3
        name: Cache ~/.stack
        with:
          path: ~/.stack
          key: ${{ runner.os }}-stack-global-${{ hashFiles('stack.yaml') }}-${{ hashFiles('package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-global-${{ hashFiles('stack.yaml') }}-
            ${{ runner.os }}-stack-global-

      - uses: actions/cache@v3
        name: Cache .stack-work
        with:
          path: .stack-work
          key: ${{ runner.os }}-stack-work-${{ hashFiles('stack.yaml') }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('**/*.hs') }}
          restore-keys: |
            ${{ runner.os }}-stack-work-${{ hashFiles('stack.yaml') }}-${{ hashFiles('package.yaml') }}-
            ${{ runner.os }}-stack-work-${{ hashFiles('stack.yaml') }}-
            ${{ runner.os }}-stack-work-

      - name: Build
        run: stack --local-bin-path=. install ytaudio:ytaudio --system-ghc --test --bench --no-run-tests --no-run-benchmarks

      - name: Test
        run: stack test --system-ghc

      - name: Set binary path name
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: echo "::set-env name=BINARY_PATH::./ytaudio"

      - name: Build ArchLinux package
        run: docker build -t ytaudio --build-arg ytaudio_path=. . && docker run -v "$(pwd):/export" ytaudio sh -c 'cp ytaudio-*.pkg.tar.* /export'

      - name: Set package path name
        run: echo "PACKAGE_PATH=$( ls -1 ytaudio-*.pkg.tar.* | head -1 )" >> $GITHUB_ENV

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v3
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: echo "::set-output name=upload_url::$(cat release_url.txt)"

      - name: Upload binary
        id: upload-binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ env.BINARY_PATH }}
          asset_name: ytaudio-${{ steps.tag.outputs.tag }}-${{ runner.os }}
          asset_content_type: application/octet-stream

      - name: Upload package
        id: upload-package
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ env.PACKAGE_PATH }}
          asset_name: ${{ env.PACKAGE_PATH }}
          asset_content_type: application/octet-stream
